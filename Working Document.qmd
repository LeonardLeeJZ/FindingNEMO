---
title: "Working Sheet"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse, dplyr)
```

```{r}
core <- read_csv("data/mc3_shinynodes.csv")
links <- read_csv("data/mc3_links_new.csv")


```
# Load the required package
```{r}


# Read the CSV file

# Create a new column called 'type'
anom_nodes <- core %>%
  mutate(revenue_group = case_when(
      revenue_group == 1 ~ "High",
      revenue_group %in% c(2, 3) ~ "Medium",
      revenue_group %in% c(4, 5) ~ "Low",
      is.na(revenue_group) ~ "Unreported",
      TRUE ~ as.character(revenue_group)
    ),
    transboundary = ifelse(is.na(transboundary), "no", ifelse(transboundary == "unknown", "no", transboundary)),
    group = if_else(group %in% c("Ultimate Beneficial Owner", "Company Contact", "Shareholder", "Multi-role Entity"), group, "Company")
  )
```

```{r}
links <- read_csv("data/mc3_links_new.csv")

filtered_edges1 <- links %>%
  filter(type == "Beneficial Owner") %>%
  group_by(target) %>%
  filter(n() >= 3) %>%
  ungroup()

grouped_edges <- filtered_edges1 %>%
  group_by(target) %>%
  summarise(count = n())


```


```{r}
hnodes <- anom_nodes %>%
  filter(revenue_group == "High")

mnodes <- anom_nodes %>%
  filter(revenue_group == "Medium")

lnodes <- anom_nodes %>%
  filter(revenue_group == "Low")

unodes <- anom_nodes %>%
  filter(revenue_group == "Unreported")

```

```{r}
hedges <- links %>%
  filter(source %in% hnodes$id)


```

```{r}
write.csv(anom_nodes, file = "data/anom_nodes.csv", row.names = FALSE)
```
```{r}

column(width = 4,
                     box(
                       width = NULL, status = "info",
                       uiOutput("Demo_Category")
                     )
                    ),





output$Demo_Category<- renderUI({

    selectInput("demo_category","Choose X Axis Variable for Bar Plot:", choices=colnames(demo_dataset())[names(demo_dataset()) !="Participant ID"])

  })
```


```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, bslib)

# Read the data
nodes <- read_csv("data/anom_nodes.csv")
links <- read_csv("data/mc3_links_new.csv")

ui <- fluidPage(
  titlePanel(title = "Network Analysis for Fishy Trading Activity"),
  tabsetPanel(
    tabPanel("Companies",
             sidebarLayout(
               sidebarPanel(
                 radioButtons(
                   inputId = "entity",
                   label = "Select Entity:",
                   choices = c(`Company` = "Company"
                   ),
                   selected = "Company"
                 ),
                 selectInput(
                   inputId = "revenue",
                   label = "Select Revenue Group:",
                   choices = c(
                     `High` = "High",
                     `Medium` = "Medium",
                     `Low` = "Low",
                     `Unreported` = "Unreported"
                   ),
                   selected = "Unreported"
                 ),
                 selectInput(
                   inputId = "transboundary",
                   label = "Select Transboundary:",
                   choices = c(
                     `Yes` = "yes",
                     `No` = "no"
                   ),
                   multiple = TRUE,
                   selected = c("yes", "no")
                 )
               ),
               mainPanel(
                 title = "Company Network",
                 visNetworkOutput("networkPlot")
               )
             )
    ),
    tabPanel("Individuals",
             sidebarLayout(
               sidebarPanel(
                 radioButtons(
                   inputId = "entity",
                   label = "Select Entity:",
                   choices = c(
                     `Ultimate Beneficial Owner` = "Ultimate Beneficial Owner",
                     `Shareholder` = "Shareholder",
                     `Multi-role Entity` = "Multi-role Entity",
                     `Company Contact` = "Company Contact"
                   ),
                   selected = "Ultimate Beneficial Owner"
                 ),
                 selectInput(
                   inputId = "revenue",
                   label = "Select Revenue Group:",
                   choices = c(`Unreported` = "Unreported"
                   ),
                   selected = "Unreported"
                 ),
                 selectInput(
                   inputId = "transboundary",
                   label = "Select Transboundary:",
                   choices = c(
                     `Yes` = "yes",
                     `No` = "no"
                   ),
                   multiple = TRUE,
                   selected = c("yes", "no")
                 )
               ),
               mainPanel(
                 title = "Individual Network",
                 visNetworkOutput("individualPlot")
               )
             )
    )
  ),
  theme = bs_theme(bootswatch = "morph")
)

server <- function(input, output) {
  
  output$networkPlot <- renderVisNetwork({
    
    filter_nodes <- nodes %>%
      filter(revenue_group == input$revenue & transboundary == input$transboundary)
    
    filter_links <- links %>%
      filter(source %in% filter_nodes$id | target %in% filter_nodes$id)
    
    # distinct source and target from filter_links
    distinct_source <- filter_links %>%
      distinct(source) %>%
      rename("id" = "source") 
    
    distinct_target <- filter_links %>%
      distinct(target) %>%
      rename("id" = "target")
    
    total_nodes <- bind_rows(distinct_source, distinct_target)
    total_links <- filter_links %>%
      rename("from" = "source",
             "to" = "target")
    # Set node colors based on entity
    total_nodes$color <- ifelse(total_nodes$id %in% distinct_target$id, "#F8766D", "#aebbff")
    # Plot network
    visNetwork(
      total_nodes, 
      total_links,
      width = "100%"
    ) %>%
      visIgraphLayout(
        layout = "layout_with_fr"
      ) %>%
      visLegend() %>%
      visGroups(groupname = "Company",
                color = "#aebbff") %>%
      visEdges() %>%
      visOptions(
        # Specify additional Interactive Elements
        highlightNearest = list(enabled = T, degree = 2, hover = T),
        # Add drop-down menu to filter by company name
        nodesIdSelection = TRUE,
        collapse = TRUE
      ) %>%
      visInteraction(navigationButtons = FALSE)
  })
  
  output$individualPlot <- renderVisNetwork({
    # Extract nodes from input$entity
    filter_nodes2 <- nodes %>%
      filter(group == input$entity & transboundary == input$transboundary)
    
    filter_links2 <- links %>%
      filter(source %in% filter_nodes2$id | target %in% filter_nodes2$id
      )
    
    # distinct source and target from filter_links
    distinct_source2 <- filter_links2 %>%
      distinct(source) %>%
      rename("id" = "source") 
    
    distinct_target2 <- filter_links2 %>%
      distinct(target) %>%
      rename("id" = "target")
    
    total_nodes2 <- bind_rows(distinct_source2, distinct_target2)
    total_links2 <- filter_links2 %>%
      rename("from" = "source",
             "to" = "target")
    # Set node colors based on entity
    total_nodes2$color <- ifelse(total_nodes2$id %in% distinct_target2$id, "#F8766D", "#aebbff")
    # Plot network
    visNetwork(
      total_nodes2, 
      total_links2,
      width = "100%"
    ) %>%
      visIgraphLayout(
        layout = "layout_with_fr"
      ) %>%
      visLegend() %>%
      visGroups(groupname = "Company",
                color = "#aebbff") %>%
      visEdges() %>%
      visOptions(
        # Specify additional Interactive Elements
        highlightNearest = list(enabled = T, degree = 2, hover = T),
        # Add drop-down menu to filter by company name
        nodesIdSelection = TRUE,
        collapse = TRUE
      ) %>%
      visInteraction(navigationButtons = TRUE)
  })
  
  
}

# Run the application 
shinyApp(ui = ui, server = server)




```
# Export the anom_nodes dataset as a CSV file
write.csv(anom_nodes, file = "data/anom_nodes.csv", row.names = FALSE)

anom_edges <-
  as_tibble(mc3_data$links) %>%
  distinct() %>%
  mutate(source = as.character(source),
         target = as.character(target),
         type = as.character(type)) %>%
  mutate(type = ifelse(type == "Beneficial Owner", "Shareholder", type)) %>%
  group_by(source, target, type) %>%
  summarise(weights = n()) %>%
  filter(source!=target) %>%
  ungroup()



write.csv(anom_edges, file = "data/anom_edges.csv", row.names = FALSE)

# View the updated data frame


ui <- page_navbar(
  title = "Network Analysis for Fishy Trading Activity",
  nav_panel("Anomalous Behaviours"),
  nav_panel("Anomalies",
            column(
              width = 5,
              fluidRow(
                column(
                  width = 12,
                  checkboxGroupInput("type_filter", "Type", choices = unique(anom_nodes$type), selected = NULL)
                ),
                column(
                  width = 12,
                  checkboxGroupInput("transboundary_filter", "Transboundary", choices = c("Yes" = "yes", "No" = "no", "NA" = "NA"), selected = NULL)
                ),
                column(
                  width = 12,
                  checkboxGroupInput("revenue_group_filter", "Revenue", choices = c("High" = 1, "Medium" = c(2,3), "Low" = c(4,5), "Unreported" = NA), selected = NULL)
                )
              ),
              fluidRow(
                column(
                  width = 12,
                  visNetworkOutput("Anom_Graph")
                )
              )
            )
  ),       
  nav_panel("Groups"),
  nav_spacer(),
  theme = bs_theme(version = 5, bootswatch = "morph")
)



 output$Anom_Graph <- renderVisNetwork({
    filtered_nodes <- anom_nodes %>%
      mutate(type = str_trim(type)) %>%
      filter(type %in% input$type_filter) %>%
      filter(transboundary %in% input$transboundary_filter) %>%
      filter(revenue_group %in% input$revenue_group_filter)
    
    visNetwork(filtered_nodes, anom_edges) %>%
      visOptions(highlightNearest = TRUE)
  })


#filtered_edges2 <- mc3_edges %>%
  filter(type == "Beneficial Owner") %>%
  group_by(source) %>%
  filter(n() == 1) %>%
  ungroup() %>%
  group_by(target) %>%
  filter(n() >= 3) %>%
  ungroup()
  
  grouped_edges2 <- filtered_edges2 %>%
  group_by(target) %>%
  summarise(count = n())
  
  fnode1 <- nodes %>%
      filter(group == input$entity)
    
    fnode2 <- nodes %>%
      filter(revenue_group == input$revenue)
    
    fnode3 <- nodes %>%
      filter(transboundary == input$transboundary)
    
    cnode <- fnode3 %>%
      distinct(id) %>%
      left_join(nodes, by = "id") %>%
      select(id, group, revenue_group, transboundary)
     
  
     
    ```
